apiVersion: ray.io/v1alpha1
kind: RayCluster
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: raycluster
spec:
  rayVersion: {{ .Values.worker.rayVersion }}
  headGroupSpec:
    rayStartParams:
      dashboard-host: '0.0.0.0'
    template:
      spec:
        {{- with .Values.imagePullSecrets }}
        imagePullSecrets:
          {{- toYaml . | nindent 8 }}
        {{- end }}
        nodeSelector:
          morpheus-type: "gpu-adv"
        containers:
        - name: ray-head
          imagePullPolicy: Always
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh","-c","ray stop"]
          resources:
            limits:
              cpu: "{{ .Values.worker.head.resources.limits.cpu }}"
              memory: "{{ .Values.worker.head.resources.limits.memory }}"
            requests:
              cpu: "{{ .Values.worker.head.resources.requests.cpu }}"
              memory: "{{ .Values.worker.head.resources.requests.memory }}"
          volumeMounts:
            - name: models
              mountPath: /mnt
        volumes:
        - name: models
          persistentVolumeClaim:
            claimName: models-claim
            readOnly: true
  workerGroupSpecs:
  - replicas: {{ .Values.worker.workerGroup.replicas }}
    minReplicas: {{ .Values.worker.workerGroup.minReplicas }}
    maxReplicas: {{ .Values.worker.workerGroup.maxReplicas }}
    groupName: ray-worker-group
    rayStartParams:
      num-cpus: "{{ .Values.worker.workerGroup.rayStartParams.numCpus }}"
      num-gpus: "{{ .Values.worker.workerGroup.rayStartParams.numGpus }}"
    template:
      metadata:
        labels:
          key: value
        annotations:
          key: value
      spec:
        nodeSelector:
          morpheus-type: "gpu-adv"
        containers:
        - name: machine-learning
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: Always
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh","-c","ray stop"]
          resources:
            limits:
              cpu: "{{ .Values.worker.workerGroup.resources.limits.cpu }}"
              memory: "{{ .Values.worker.workerGroup.resources.limits.memory }}"
              nvidia.com/gpu: "{{ .Values.worker.workerGroup.resources.limits.gpu }}"
            requests:
              cpu: "{{ .Values.worker.workerGroup.resources.requests.cpu }}"
              memory: "{{ .Values.worker.workerGroup.resources.requests.memory }}"
              nvidia.com/gpu: "{{ .Values.worker.workerGroup.resources.requests.gpu }}"
          volumeMounts:
            - name: models
              mountPath: /mnt
        volumes:
        - name: models
          persistentVolumeClaim:
            claimName: models-claim
            readOnly: true
