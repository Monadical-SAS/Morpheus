import random
import time
from functools import wraps

from loguru import logger

from app.config import get_settings
from app.repository.files_repository import FilesRepository

settings = get_settings()
files_repository = FilesRepository()


def simulate_generation():
    input_images = files_repository.get_last_10_images()
    random_number = random.randint(1, settings.max_num_images)
    final_images = []
    for i in range(random_number):
        final_images.append(random.choice(input_images))
    return final_images


def simulate_prompt_generation():
    text = (
        "This is a fake prompt generated by the model. It is just used to check the full flow of prompt generation"
        " in local without run the model"
    )
    return text


def check_environment(func):
    @wraps(func)
    def wrapper_check_environment(*args, **kwargs):
        if settings.environment == "local":
            logger.info("Simulating the image generation")
            time.sleep(3)
            logger.info("Simulating uploading to s3 and the url retrieval")
            time.sleep(1)
            return simulate_generation()
        elif settings.environment == "local-mps":
            logger.info("Apple Silicon environment configured - using MPS for image generation")

        return func(*args, **kwargs)

    return wrapper_check_environment


def check_environment_for_magic_prompt(func):
    @wraps(func)
    def wrapper_check_environment(*args, **kwargs):
        if settings.environment == "local":
            logger.info("Simulating the prompt generation")
            time.sleep(3)
            return simulate_prompt_generation()
        elif settings.environment == "local-mps":
            logger.info("Apple Silicon environment configured - using MPS for image generation")

        return func(*args, **kwargs)

    return wrapper_check_environment


def run_as_per_environment(method):
    @wraps(method)
    def wrapper_check_environment(ref, *args, **kwargs):
        if settings.environment == "local":
            logger.info("Simulating loading model")
            time.sleep(3)
            logger.info("Loading finished")
            return ref.run(*args, **kwargs)
        elif settings.environment == "local-mps":
            logger.info("Apple Silicon environment configured - loading model using MPS")

        return method(ref, *args, **kwargs)

    return wrapper_check_environment
